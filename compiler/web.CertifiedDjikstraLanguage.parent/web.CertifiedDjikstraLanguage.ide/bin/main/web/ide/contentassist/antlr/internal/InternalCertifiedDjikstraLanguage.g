/*
 * generated by Xtext 2.22.0
 */
grammar InternalCertifiedDjikstraLanguage;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package web.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package web.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import web.services.CertifiedDjikstraLanguageGrammarAccess;

}
@parser::members {
	private CertifiedDjikstraLanguageGrammarAccess grammarAccess;

	public void setGrammarAccess(CertifiedDjikstraLanguageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModule
entryRuleModule
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
}
:
{ before(grammarAccess.getModuleRule()); }
	 ruleModule
{ after(grammarAccess.getModuleRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Module
ruleModule 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModuleAccess().getDeclarationsAssignment()); }
		(rule__Module__DeclarationsAssignment)*
		{ after(grammarAccess.getModuleAccess().getDeclarationsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleDocDeclaration
entryRuleDocDeclaration
:
{ before(grammarAccess.getDocDeclarationRule()); }
	 ruleDocDeclaration
{ after(grammarAccess.getDocDeclarationRule()); } 
	 EOF 
;

// Rule DocDeclaration
ruleDocDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDocDeclarationAccess().getGroup()); }
		(rule__DocDeclaration__Group__0)
		{ after(grammarAccess.getDocDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDeclaration
entryRuleDeclaration
:
{ before(grammarAccess.getDeclarationRule()); }
	 ruleDeclaration
{ after(grammarAccess.getDeclarationRule()); } 
	 EOF 
;

// Rule Declaration
ruleDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDeclarationAccess().getAlternatives()); }
		(rule__Declaration__Alternatives)
		{ after(grammarAccess.getDeclarationAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTransformation
entryRuleTransformation
:
{ before(grammarAccess.getTransformationRule()); }
	 ruleTransformation
{ after(grammarAccess.getTransformationRule()); } 
	 EOF 
;

// Rule Transformation
ruleTransformation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTransformationAccess().getGroup()); }
		(rule__Transformation__Group__0)
		{ after(grammarAccess.getTransformationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTransformationBody
entryRuleTransformationBody
:
{ before(grammarAccess.getTransformationBodyRule()); }
	 ruleTransformationBody
{ after(grammarAccess.getTransformationBodyRule()); } 
	 EOF 
;

// Rule TransformationBody
ruleTransformationBody 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTransformationBodyAccess().getGroup()); }
		(rule__TransformationBody__Group__0)
		{ after(grammarAccess.getTransformationBodyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGraphOrDecl
entryRuleGraphOrDecl
:
{ before(grammarAccess.getGraphOrDeclRule()); }
	 ruleGraphOrDecl
{ after(grammarAccess.getGraphOrDeclRule()); } 
	 EOF 
;

// Rule GraphOrDecl
ruleGraphOrDecl 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGraphOrDeclAccess().getAlternatives()); }
		(rule__GraphOrDecl__Alternatives)
		{ after(grammarAccess.getGraphOrDeclAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRootOrDecl
entryRuleRootOrDecl
:
{ before(grammarAccess.getRootOrDeclRule()); }
	 ruleRootOrDecl
{ after(grammarAccess.getRootOrDeclRule()); } 
	 EOF 
;

// Rule RootOrDecl
ruleRootOrDecl 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRootOrDeclAccess().getAlternatives()); }
		(rule__RootOrDecl__Alternatives)
		{ after(grammarAccess.getRootOrDeclAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInstantiation
entryRuleInstantiation
:
{ before(grammarAccess.getInstantiationRule()); }
	 ruleInstantiation
{ after(grammarAccess.getInstantiationRule()); } 
	 EOF 
;

// Rule Instantiation
ruleInstantiation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInstantiationAccess().getAlternatives()); }
		(rule__Instantiation__Alternatives)
		{ after(grammarAccess.getInstantiationAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGraphInstantiation
entryRuleGraphInstantiation
:
{ before(grammarAccess.getGraphInstantiationRule()); }
	 ruleGraphInstantiation
{ after(grammarAccess.getGraphInstantiationRule()); } 
	 EOF 
;

// Rule GraphInstantiation
ruleGraphInstantiation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGraphInstantiationAccess().getGroup()); }
		(rule__GraphInstantiation__Group__0)
		{ after(grammarAccess.getGraphInstantiationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRootInstantiation
entryRuleRootInstantiation
:
{ before(grammarAccess.getRootInstantiationRule()); }
	 ruleRootInstantiation
{ after(grammarAccess.getRootInstantiationRule()); } 
	 EOF 
;

// Rule RootInstantiation
ruleRootInstantiation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRootInstantiationAccess().getGroup()); }
		(rule__RootInstantiation__Group__0)
		{ after(grammarAccess.getRootInstantiationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRoot
entryRuleRoot
:
{ before(grammarAccess.getRootRule()); }
	 ruleRoot
{ after(grammarAccess.getRootRule()); } 
	 EOF 
;

// Rule Root
ruleRoot 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRootAccess().getGroup()); }
		(rule__Root__Group__0)
		{ after(grammarAccess.getRootAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGraph
entryRuleGraph
:
{ before(grammarAccess.getGraphRule()); }
	 ruleGraph
{ after(grammarAccess.getGraphRule()); } 
	 EOF 
;

// Rule Graph
ruleGraph 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGraphAccess().getGroup()); }
		(rule__Graph__Group__0)
		{ after(grammarAccess.getGraphAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTriplet
entryRuleTriplet
:
{ before(grammarAccess.getTripletRule()); }
	 ruleTriplet
{ after(grammarAccess.getTripletRule()); } 
	 EOF 
;

// Rule Triplet
ruleTriplet 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTripletAccess().getGroup()); }
		(rule__Triplet__Group__0)
		{ after(grammarAccess.getTripletAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVertex
entryRuleVertex
:
{ before(grammarAccess.getVertexRule()); }
	 ruleVertex
{ after(grammarAccess.getVertexRule()); } 
	 EOF 
;

// Rule Vertex
ruleVertex 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVertexAccess().getValueAssignment()); }
		(rule__Vertex__ValueAssignment)
		{ after(grammarAccess.getVertexAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeclarationAccess().getInstantiationParserRuleCall_0()); }
		ruleInstantiation
		{ after(grammarAccess.getDeclarationAccess().getInstantiationParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getDeclarationAccess().getTransformationParserRuleCall_1()); }
		ruleTransformation
		{ after(grammarAccess.getDeclarationAccess().getTransformationParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GraphOrDecl__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGraphOrDeclAccess().getGroup_0()); }
		(rule__GraphOrDecl__Group_0__0)
		{ after(grammarAccess.getGraphOrDeclAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getGraphOrDeclAccess().getGroup_1()); }
		(rule__GraphOrDecl__Group_1__0)
		{ after(grammarAccess.getGraphOrDeclAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RootOrDecl__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRootOrDeclAccess().getGroup_0()); }
		(rule__RootOrDecl__Group_0__0)
		{ after(grammarAccess.getRootOrDeclAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getRootOrDeclAccess().getGroup_1()); }
		(rule__RootOrDecl__Group_1__0)
		{ after(grammarAccess.getRootOrDeclAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instantiation__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInstantiationAccess().getGraphInstantiationParserRuleCall_0()); }
		ruleGraphInstantiation
		{ after(grammarAccess.getInstantiationAccess().getGraphInstantiationParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getInstantiationAccess().getRootInstantiationParserRuleCall_1()); }
		ruleRootInstantiation
		{ after(grammarAccess.getInstantiationAccess().getRootInstantiationParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DocDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DocDeclaration__Group__0__Impl
	rule__DocDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DocDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDocDeclarationAccess().getDocAssignment_0()); }
	(rule__DocDeclaration__DocAssignment_0)?
	{ after(grammarAccess.getDocDeclarationAccess().getDocAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DocDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DocDeclaration__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DocDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDocDeclarationAccess().getDeclarationAssignment_1()); }
	(rule__DocDeclaration__DeclarationAssignment_1)
	{ after(grammarAccess.getDocDeclarationAccess().getDeclarationAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Transformation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Transformation__Group__0__Impl
	rule__Transformation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Transformation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransformationAccess().getTransformationKeyword_0()); }
	'Transformation'
	{ after(grammarAccess.getTransformationAccess().getTransformationKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transformation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Transformation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Transformation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransformationAccess().getBodyAssignment_1()); }
	(rule__Transformation__BodyAssignment_1)
	{ after(grammarAccess.getTransformationAccess().getBodyAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TransformationBody__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TransformationBody__Group__0__Impl
	rule__TransformationBody__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TransformationBody__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransformationBodyAccess().getOKeyword_0()); }
	'o->'
	{ after(grammarAccess.getTransformationBodyAccess().getOKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TransformationBody__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TransformationBody__Group__1__Impl
	rule__TransformationBody__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TransformationBody__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransformationBodyAccess().getGraphAssignment_1()); }
	(rule__TransformationBody__GraphAssignment_1)
	{ after(grammarAccess.getTransformationBodyAccess().getGraphAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TransformationBody__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TransformationBody__Group__2__Impl
	rule__TransformationBody__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TransformationBody__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransformationBodyAccess().getCommaKeyword_2()); }
	','
	{ after(grammarAccess.getTransformationBodyAccess().getCommaKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TransformationBody__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TransformationBody__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TransformationBody__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransformationBodyAccess().getRootAssignment_3()); }
	(rule__TransformationBody__RootAssignment_3)
	{ after(grammarAccess.getTransformationBodyAccess().getRootAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__GraphOrDecl__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GraphOrDecl__Group_0__0__Impl
	rule__GraphOrDecl__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GraphOrDecl__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGraphOrDeclAccess().getGraphDeclAction_0_0()); }
	()
	{ after(grammarAccess.getGraphOrDeclAccess().getGraphDeclAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GraphOrDecl__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GraphOrDecl__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GraphOrDecl__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGraphOrDeclAccess().getGraphDeclAssignment_0_1()); }
	(rule__GraphOrDecl__GraphDeclAssignment_0_1)
	{ after(grammarAccess.getGraphOrDeclAccess().getGraphDeclAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__GraphOrDecl__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GraphOrDecl__Group_1__0__Impl
	rule__GraphOrDecl__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GraphOrDecl__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGraphOrDeclAccess().getGraphAction_1_0()); }
	()
	{ after(grammarAccess.getGraphOrDeclAccess().getGraphAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GraphOrDecl__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GraphOrDecl__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GraphOrDecl__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGraphOrDeclAccess().getGraphAssignment_1_1()); }
	(rule__GraphOrDecl__GraphAssignment_1_1)
	{ after(grammarAccess.getGraphOrDeclAccess().getGraphAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RootOrDecl__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RootOrDecl__Group_0__0__Impl
	rule__RootOrDecl__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RootOrDecl__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRootOrDeclAccess().getRootDeclAction_0_0()); }
	()
	{ after(grammarAccess.getRootOrDeclAccess().getRootDeclAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RootOrDecl__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RootOrDecl__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RootOrDecl__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRootOrDeclAccess().getRootDeclAssignment_0_1()); }
	(rule__RootOrDecl__RootDeclAssignment_0_1)
	{ after(grammarAccess.getRootOrDeclAccess().getRootDeclAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RootOrDecl__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RootOrDecl__Group_1__0__Impl
	rule__RootOrDecl__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RootOrDecl__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRootOrDeclAccess().getRootAction_1_0()); }
	()
	{ after(grammarAccess.getRootOrDeclAccess().getRootAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RootOrDecl__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RootOrDecl__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RootOrDecl__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRootOrDeclAccess().getRootAssignment_1_1()); }
	(rule__RootOrDecl__RootAssignment_1_1)
	{ after(grammarAccess.getRootOrDeclAccess().getRootAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__GraphInstantiation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GraphInstantiation__Group__0__Impl
	rule__GraphInstantiation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GraphInstantiation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGraphInstantiationAccess().getNameAssignment_0()); }
	(rule__GraphInstantiation__NameAssignment_0)
	{ after(grammarAccess.getGraphInstantiationAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GraphInstantiation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GraphInstantiation__Group__1__Impl
	rule__GraphInstantiation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GraphInstantiation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGraphInstantiationAccess().getColonEqualsSignKeyword_1()); }
	':='
	{ after(grammarAccess.getGraphInstantiationAccess().getColonEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GraphInstantiation__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GraphInstantiation__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GraphInstantiation__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGraphInstantiationAccess().getGraphAssignment_2()); }
	(rule__GraphInstantiation__GraphAssignment_2)
	{ after(grammarAccess.getGraphInstantiationAccess().getGraphAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RootInstantiation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RootInstantiation__Group__0__Impl
	rule__RootInstantiation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RootInstantiation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRootInstantiationAccess().getNameAssignment_0()); }
	(rule__RootInstantiation__NameAssignment_0)
	{ after(grammarAccess.getRootInstantiationAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RootInstantiation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RootInstantiation__Group__1__Impl
	rule__RootInstantiation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RootInstantiation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRootInstantiationAccess().getColonEqualsSignKeyword_1()); }
	':='
	{ after(grammarAccess.getRootInstantiationAccess().getColonEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RootInstantiation__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RootInstantiation__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RootInstantiation__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRootInstantiationAccess().getRootAssignment_2()); }
	(rule__RootInstantiation__RootAssignment_2)
	{ after(grammarAccess.getRootInstantiationAccess().getRootAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Root__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Root__Group__0__Impl
	rule__Root__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Root__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRootAccess().getRKeyword_0()); }
	'R'
	{ after(grammarAccess.getRootAccess().getRKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Root__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Root__Group__1__Impl
	rule__Root__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Root__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRootAccess().getRootAction_1()); }
	()
	{ after(grammarAccess.getRootAccess().getRootAction_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Root__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Root__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Root__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRootAccess().getValAssignment_2()); }
	(rule__Root__ValAssignment_2)
	{ after(grammarAccess.getRootAccess().getValAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Graph__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Graph__Group__0__Impl
	rule__Graph__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGraphAccess().getGKeyword_0()); }
	'G'
	{ after(grammarAccess.getGraphAccess().getGKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Graph__Group__1__Impl
	rule__Graph__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGraphAccess().getGraphAction_1()); }
	()
	{ after(grammarAccess.getGraphAccess().getGraphAction_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Graph__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getGraphAccess().getArcsAssignment_2()); }
		(rule__Graph__ArcsAssignment_2)
		{ after(grammarAccess.getGraphAccess().getArcsAssignment_2()); }
	)
	(
		{ before(grammarAccess.getGraphAccess().getArcsAssignment_2()); }
		(rule__Graph__ArcsAssignment_2)*
		{ after(grammarAccess.getGraphAccess().getArcsAssignment_2()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Triplet__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Triplet__Group__0__Impl
	rule__Triplet__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Triplet__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTripletAccess().getTripletAction_0()); }
	()
	{ after(grammarAccess.getTripletAccess().getTripletAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Triplet__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Triplet__Group__1__Impl
	rule__Triplet__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Triplet__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTripletAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getTripletAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Triplet__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Triplet__Group__2__Impl
	rule__Triplet__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Triplet__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTripletAccess().getXAssignment_2()); }
	(rule__Triplet__XAssignment_2)
	{ after(grammarAccess.getTripletAccess().getXAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Triplet__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Triplet__Group__3__Impl
	rule__Triplet__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Triplet__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTripletAccess().getCommaKeyword_3()); }
	','
	{ after(grammarAccess.getTripletAccess().getCommaKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Triplet__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Triplet__Group__4__Impl
	rule__Triplet__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Triplet__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTripletAccess().getYAssignment_4()); }
	(rule__Triplet__YAssignment_4)
	{ after(grammarAccess.getTripletAccess().getYAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Triplet__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Triplet__Group__5__Impl
	rule__Triplet__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Triplet__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTripletAccess().getCommaKeyword_5()); }
	','
	{ after(grammarAccess.getTripletAccess().getCommaKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Triplet__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Triplet__Group__6__Impl
	rule__Triplet__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Triplet__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTripletAccess().getZAssignment_6()); }
	(rule__Triplet__ZAssignment_6)
	{ after(grammarAccess.getTripletAccess().getZAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Triplet__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Triplet__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Triplet__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTripletAccess().getRightParenthesisKeyword_7()); }
	')'
	{ after(grammarAccess.getTripletAccess().getRightParenthesisKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Module__DeclarationsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModuleAccess().getDeclarationsDocDeclarationParserRuleCall_0()); }
		ruleDocDeclaration
		{ after(grammarAccess.getModuleAccess().getDeclarationsDocDeclarationParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DocDeclaration__DocAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDocDeclarationAccess().getDocCDL_DOCTerminalRuleCall_0_0()); }
		RULE_CDL_DOC
		{ after(grammarAccess.getDocDeclarationAccess().getDocCDL_DOCTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DocDeclaration__DeclarationAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDocDeclarationAccess().getDeclarationDeclarationParserRuleCall_1_0()); }
		ruleDeclaration
		{ after(grammarAccess.getDocDeclarationAccess().getDeclarationDeclarationParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transformation__BodyAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTransformationAccess().getBodyTransformationBodyParserRuleCall_1_0()); }
		ruleTransformationBody
		{ after(grammarAccess.getTransformationAccess().getBodyTransformationBodyParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TransformationBody__GraphAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTransformationBodyAccess().getGraphGraphOrDeclParserRuleCall_1_0()); }
		ruleGraphOrDecl
		{ after(grammarAccess.getTransformationBodyAccess().getGraphGraphOrDeclParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TransformationBody__RootAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTransformationBodyAccess().getRootRootOrDeclParserRuleCall_3_0()); }
		ruleRootOrDecl
		{ after(grammarAccess.getTransformationBodyAccess().getRootRootOrDeclParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GraphOrDecl__GraphDeclAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGraphOrDeclAccess().getGraphDeclGraphInstantiationCrossReference_0_1_0()); }
		(
			{ before(grammarAccess.getGraphOrDeclAccess().getGraphDeclGraphInstantiationIDTerminalRuleCall_0_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getGraphOrDeclAccess().getGraphDeclGraphInstantiationIDTerminalRuleCall_0_1_0_1()); }
		)
		{ after(grammarAccess.getGraphOrDeclAccess().getGraphDeclGraphInstantiationCrossReference_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GraphOrDecl__GraphAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGraphOrDeclAccess().getGraphGraphParserRuleCall_1_1_0()); }
		ruleGraph
		{ after(grammarAccess.getGraphOrDeclAccess().getGraphGraphParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RootOrDecl__RootDeclAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRootOrDeclAccess().getRootDeclRootInstantiationCrossReference_0_1_0()); }
		(
			{ before(grammarAccess.getRootOrDeclAccess().getRootDeclRootInstantiationIDTerminalRuleCall_0_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getRootOrDeclAccess().getRootDeclRootInstantiationIDTerminalRuleCall_0_1_0_1()); }
		)
		{ after(grammarAccess.getRootOrDeclAccess().getRootDeclRootInstantiationCrossReference_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RootOrDecl__RootAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRootOrDeclAccess().getRootRootParserRuleCall_1_1_0()); }
		ruleRoot
		{ after(grammarAccess.getRootOrDeclAccess().getRootRootParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GraphInstantiation__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGraphInstantiationAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getGraphInstantiationAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GraphInstantiation__GraphAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGraphInstantiationAccess().getGraphGraphParserRuleCall_2_0()); }
		ruleGraph
		{ after(grammarAccess.getGraphInstantiationAccess().getGraphGraphParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RootInstantiation__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRootInstantiationAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getRootInstantiationAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RootInstantiation__RootAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRootInstantiationAccess().getRootRootParserRuleCall_2_0()); }
		ruleRoot
		{ after(grammarAccess.getRootInstantiationAccess().getRootRootParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Root__ValAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRootAccess().getValVertexParserRuleCall_2_0()); }
		ruleVertex
		{ after(grammarAccess.getRootAccess().getValVertexParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__ArcsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGraphAccess().getArcsTripletParserRuleCall_2_0()); }
		ruleTriplet
		{ after(grammarAccess.getGraphAccess().getArcsTripletParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Triplet__XAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTripletAccess().getXVertexParserRuleCall_2_0()); }
		ruleVertex
		{ after(grammarAccess.getTripletAccess().getXVertexParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Triplet__YAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTripletAccess().getYVertexParserRuleCall_4_0()); }
		ruleVertex
		{ after(grammarAccess.getTripletAccess().getYVertexParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Triplet__ZAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTripletAccess().getZVertexParserRuleCall_6_0()); }
		ruleVertex
		{ after(grammarAccess.getTripletAccess().getZVertexParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Vertex__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVertexAccess().getValueINTTerminalRuleCall_0()); }
		RULE_INT
		{ after(grammarAccess.getVertexAccess().getValueINTTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_CDL_DOC : '(**' ( options {greedy=false;} : . )*'*)';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
